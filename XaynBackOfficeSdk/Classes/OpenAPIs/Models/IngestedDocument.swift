//
// IngestedDocument.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct IngestedDocument: Codable, JSONEncodable, Hashable {

    static let idRule = StringRule(minLength: 1, maxLength: 256, pattern: "/^[a-zA-Z0-9_:@.\\-]+$/")
    static let snippetRule = StringRule(minLength: 1, maxLength: 1024, pattern: "/.+/")
    /** An id can be any non-empty string that consist of digits, latin letters, underscores, colons, minus signs, at signs, and dots. */
    public var id: String
    /** Text that will be used to match the document against the user interests. */
    public var snippet: String
    public var properties: DocumentProperties?
    public var tags: [String]?

    public init(id: String, snippet: String, properties: DocumentProperties? = nil, tags: [String]? = nil) {
        self.id = id
        self.snippet = snippet
        self.properties = properties
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case snippet
        case properties
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(snippet, forKey: .snippet)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}

