//
// BackOfficeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BackOfficeAPI {

    /**
     Add documents to the system
     
     - parameter ingestionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createDocuments(ingestionRequest: IngestionRequest, apiResponseQueue: DispatchQueue = XaynBackOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return createDocumentsWithRequestBuilder(ingestionRequest: ingestionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add documents to the system
     - POST /documents
     - Add documents to the system.  The system will create a representation of the document that will be used to match it against the preferences of a user.  **Important note:** Currently we allow up to a maximum of 100 documents per batch size. If you need to add more, then please split up the total amount of documents in separate calls, where each call contains at maximum 100 documents.  **Important note:** Documents which have no `publication_date` are not included when using the `published_after` filter. 
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter ingestionRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func createDocumentsWithRequestBuilder(ingestionRequest: IngestionRequest) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/documents"
        let localVariableURLString = XaynBackOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ingestionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = XaynBackOfficeSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete the document from the system.
     
     - parameter documentId: (path) Id of the document 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteDocument(documentId: String, apiResponseQueue: DispatchQueue = XaynBackOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteDocumentWithRequestBuilder(documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete the document from the system.
     - DELETE /documents/{document_id}
     - Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDocumentWithRequestBuilder(documentId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynBackOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = XaynBackOfficeSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete all document properties
     
     - parameter documentId: (path) Id of the document 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteDocumentProperties(documentId: String, apiResponseQueue: DispatchQueue = XaynBackOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteDocumentPropertiesWithRequestBuilder(documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete all document properties
     - DELETE /documents/{document_id}/properties
     - Deletes all the properties of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDocumentPropertiesWithRequestBuilder(documentId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}/properties"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynBackOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = XaynBackOfficeSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a document property
     
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteDocumentProperty(documentId: String, propertyId: String, apiResponseQueue: DispatchQueue = XaynBackOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteDocumentPropertyWithRequestBuilder(documentId: documentId, propertyId: propertyId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a document property
     - DELETE /documents/{document_id}/properties/{property_id}
     - Deletes the property of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDocumentPropertyWithRequestBuilder(documentId: String, propertyId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}/properties/{property_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let propertyIdPreEscape = "\(APIHelper.mapValueToPathItem(propertyId))"
        let propertyIdPostEscape = propertyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{property_id}", with: propertyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynBackOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = XaynBackOfficeSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete all listed documents.
     
     - parameter deleteDocumentsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteDocuments(deleteDocumentsRequest: DeleteDocumentsRequest, apiResponseQueue: DispatchQueue = XaynBackOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteDocumentsWithRequestBuilder(deleteDocumentsRequest: deleteDocumentsRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete all listed documents.
     - DELETE /documents
     - Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter deleteDocumentsRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDocumentsWithRequestBuilder(deleteDocumentsRequest: DeleteDocumentsRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/documents"
        let localVariableURLString = XaynBackOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteDocumentsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = XaynBackOfficeSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a document property
     
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDocumentProperty(documentId: String, propertyId: String, apiResponseQueue: DispatchQueue = XaynBackOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: DocumentPropertyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getDocumentPropertyWithRequestBuilder(documentId: documentId, propertyId: propertyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a document property
     - GET /documents/{document_id}/properties/{property_id}
     - Gets the property of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - returns: RequestBuilder<DocumentPropertyResponse> 
     */
    open class func getDocumentPropertyWithRequestBuilder(documentId: String, propertyId: String) -> RequestBuilder<DocumentPropertyResponse> {
        var localVariablePath = "/documents/{document_id}/properties/{property_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let propertyIdPreEscape = "\(APIHelper.mapValueToPathItem(propertyId))"
        let propertyIdPostEscape = propertyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{property_id}", with: propertyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynBackOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentPropertyResponse>.Type = XaynBackOfficeSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all document properties
     
     - parameter documentId: (path) Id of the document 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listDocumentProperties(documentId: String, apiResponseQueue: DispatchQueue = XaynBackOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: DocumentPropertiesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listDocumentPropertiesWithRequestBuilder(documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all document properties
     - GET /documents/{document_id}/properties
     - Gets all the properties of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - returns: RequestBuilder<DocumentPropertiesResponse> 
     */
    open class func listDocumentPropertiesWithRequestBuilder(documentId: String) -> RequestBuilder<DocumentPropertiesResponse> {
        var localVariablePath = "/documents/{document_id}/properties"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynBackOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentPropertiesResponse>.Type = XaynBackOfficeSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set all document properties
     
     - parameter documentId: (path) Id of the document 
     - parameter documentPropertiesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func replaceDocumentProperties(documentId: String, documentPropertiesRequest: DocumentPropertiesRequest, apiResponseQueue: DispatchQueue = XaynBackOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return replaceDocumentPropertiesWithRequestBuilder(documentId: documentId, documentPropertiesRequest: documentPropertiesRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set all document properties
     - PUT /documents/{document_id}/properties
     - Sets or replaces all the properties of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - parameter documentPropertiesRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func replaceDocumentPropertiesWithRequestBuilder(documentId: String, documentPropertiesRequest: DocumentPropertiesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}/properties"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynBackOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: documentPropertiesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = XaynBackOfficeSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set a document property
     
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - parameter documentPropertyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func replaceDocumentProperty(documentId: String, propertyId: String, documentPropertyRequest: DocumentPropertyRequest, apiResponseQueue: DispatchQueue = XaynBackOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return replaceDocumentPropertyWithRequestBuilder(documentId: documentId, propertyId: propertyId, documentPropertyRequest: documentPropertyRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set a document property
     - PUT /documents/{document_id}/properties/{property_id}
     - Sets or replaces the property of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - parameter documentPropertyRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func replaceDocumentPropertyWithRequestBuilder(documentId: String, propertyId: String, documentPropertyRequest: DocumentPropertyRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}/properties/{property_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let propertyIdPreEscape = "\(APIHelper.mapValueToPathItem(propertyId))"
        let propertyIdPostEscape = propertyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{property_id}", with: propertyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynBackOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: documentPropertyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = XaynBackOfficeSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
