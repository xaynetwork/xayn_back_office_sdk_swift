//
// BackOfficeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BackOfficeAPI {

    /**
     Delete the document from the system.
     
     - parameter documentId: (path) Id of the document 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteDocument(documentId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteDocumentWithRequestBuilder(documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete the document from the system.
     - DELETE /documents/{document_id}
     - Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDocumentWithRequestBuilder(documentId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete all document properties
     
     - parameter documentId: (path) Id of the document 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteDocumentProperties(documentId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteDocumentPropertiesWithRequestBuilder(documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete all document properties
     - DELETE /documents/{document_id}/properties
     - Deletes all the properties of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDocumentPropertiesWithRequestBuilder(documentId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}/properties"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a document property
     
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteDocumentProperty(documentId: String, propertyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteDocumentPropertyWithRequestBuilder(documentId: documentId, propertyId: propertyId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a document property
     - DELETE /documents/{document_id}/properties/{property_id}
     - Deletes the property of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDocumentPropertyWithRequestBuilder(documentId: String, propertyId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}/properties/{property_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let propertyIdPreEscape = "\(APIHelper.mapValueToPathItem(propertyId))"
        let propertyIdPostEscape = propertyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{property_id}", with: propertyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete all listed documents.
     
     - parameter deleteDocumentsRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteDocuments(deleteDocumentsRequest: DeleteDocumentsRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteDocumentsWithRequestBuilder(deleteDocumentsRequest: deleteDocumentsRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete all listed documents.
     - DELETE /documents
     - Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter deleteDocumentsRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDocumentsWithRequestBuilder(deleteDocumentsRequest: DeleteDocumentsRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/documents"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteDocumentsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all document properties
     
     - parameter documentId: (path) Id of the document 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDocumentProperties(documentId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DocumentPropertiesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getDocumentPropertiesWithRequestBuilder(documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all document properties
     - GET /documents/{document_id}/properties
     - Gets all the properties of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - returns: RequestBuilder<DocumentPropertiesResponse> 
     */
    open class func getDocumentPropertiesWithRequestBuilder(documentId: String) -> RequestBuilder<DocumentPropertiesResponse> {
        var localVariablePath = "/documents/{document_id}/properties"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentPropertiesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a document property
     
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDocumentProperty(documentId: String, propertyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DocumentPropertyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getDocumentPropertyWithRequestBuilder(documentId: documentId, propertyId: propertyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a document property
     - GET /documents/{document_id}/properties/{property_id}
     - Gets the property of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - returns: RequestBuilder<DocumentPropertyResponse> 
     */
    open class func getDocumentPropertyWithRequestBuilder(documentId: String, propertyId: String) -> RequestBuilder<DocumentPropertyResponse> {
        var localVariablePath = "/documents/{document_id}/properties/{property_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let propertyIdPreEscape = "\(APIHelper.mapValueToPathItem(propertyId))"
        let propertyIdPostEscape = propertyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{property_id}", with: propertyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentPropertyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Add documents to the system
     
     - parameter ingestionRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ingestDocuments(ingestionRequest: IngestionRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return ingestDocumentsWithRequestBuilder(ingestionRequest: ingestionRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add documents to the system
     - POST /documents
     - Add documents to the system. The system will create a representation of the document that will be used to match it against the preferences of a user.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter ingestionRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func ingestDocumentsWithRequestBuilder(ingestionRequest: IngestionRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/documents"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ingestionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set all document properties
     
     - parameter documentId: (path) Id of the document 
     - parameter documentPropertiesRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setDocumentProperties(documentId: String, documentPropertiesRequest: DocumentPropertiesRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return setDocumentPropertiesWithRequestBuilder(documentId: documentId, documentPropertiesRequest: documentPropertiesRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set all document properties
     - PUT /documents/{document_id}/properties
     - Sets or replaces all the properties of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - parameter documentPropertiesRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setDocumentPropertiesWithRequestBuilder(documentId: String, documentPropertiesRequest: DocumentPropertiesRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}/properties"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: documentPropertiesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set a document property
     
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - parameter documentPropertyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setDocumentProperty(documentId: String, propertyId: String, documentPropertyRequest: DocumentPropertyRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return setDocumentPropertyWithRequestBuilder(documentId: documentId, propertyId: propertyId, documentPropertyRequest: documentPropertyRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set a document property
     - PUT /documents/{document_id}/properties/{property_id}
     - Sets or replaces the property of the document.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - parameter propertyId: (path) Id of the document property 
     - parameter documentPropertyRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setDocumentPropertyWithRequestBuilder(documentId: String, propertyId: String, documentPropertyRequest: DocumentPropertyRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/documents/{document_id}/properties/{property_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let propertyIdPreEscape = "\(APIHelper.mapValueToPathItem(propertyId))"
        let propertyIdPostEscape = propertyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{property_id}", with: propertyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: documentPropertyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
